<!DOCTYPE html>
<html lang="en">
  <head>
    <title>KEPCO-Dashboard</title>
    <meta property="og:title" content="KEPCO-Dashborad">
    <meta name="description" content="Serving Platform">
    <link rel="canonical" href="/">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1"><meta name="theme-color" content="#ad38f1"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <link rel="mask-icon" href="/img/icons/safari-pinned-tab.svg" color="#5bbad5">
    <link rel="manifest" href="/manifest.json">
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="stylesheet" href="/css/styles.css">
    <link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">
    <script src="js/chart/Chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/5.15.0/d3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.4.1.js" integrity="sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU=" crossorigin="anonymous"></script>
  </head>
  <body>
    <% include ./part/side_menu.ejs %>
    <% include ./part/header.ejs %>

    <section id="content-area">
      <div class="heading">
        <h1 style="font-size: 40px;">Deploy Model Name: <%= model.model_name %></h1>
         <button id="append_ami" style="display: inline;"> Append AMI Data </button> 
         <span id="update_db" style="font-size: 18px;"></span>
      </div>
      <div class="cards">
        <div class="card">
          <div id="Training Result">
            <% for(var key in result) { %>
            <div class="col-md-full">
              <div class="card">
                <h3>AMI ID: <%= key %></h3>
                <span id="<%= key %>_update_time_text" style="font-size: 18px;"></span>
                <div id="<%= key %>" style="-ms-overflow-style:none; margin: 0px -40px 0px -20px;"></div>
              </div>
            </div>
            <div class="col-md-full">
              <div class="card">
                <h3>AMI ID: <%= key %></h3>
                <div id="<%= key %>_update_time_text_loss" style="display: inline; font-size: 18px;"></div>
                <div id="<%= key %>_loss" style="-ms-overflow-style:none; margin: 0px -40px 0px -20px;"></div>
              </div>
            </div>
            <% } %>
            <% for(var key in result) { %>
              <script>
              if(<%= key %>){
                let model_name = <%- JSON.stringify(model.model_name) %>;
                let pred_v = <%= JSON.stringify(result[key].pred_v) %>;
                let true_v = <%= JSON.stringify(result[key].true_v) %>;
                let time = <%- JSON.stringify(result[key].time) %>;
                let metadata = <%- JSON.stringify(metadata) %>;
                document.getElementById("<%= key %>_update_time_text").innerHTML = "Model Update Time: " + time[0];

                let layout = {
                  legend: {
                    x: 0.15,
                    y: 1.2,
                    "orientation": "h",
                    font: {size: 20}
                  },
                  xaxis: {
                    title: "Time",
                    titlefont: {
                      family: "Courier New, monospace",
                      size: 20
                    }
                  },
                  yaxis: {
                    title: "FRWR_ACT_QTY",
                    titlefont: {
                      family: "Courier New, monospace",
                      size: 20
                    },
                    range: [0, metadata[1]]
                  }
                };

                Plotly.newPlot("<%= key %>", [{
                  y: [],
                  name: 'Prediction',
                  mode: 'lines',
                  line: {color: '#80CAF6'}
                }, {
                  y: [],
                  mode: 'lines',
                  name: 'True',
                  line: {color: '#DF56F1'}
                }, {
                  y: [],
                  mode: 'markers',
                  name: 'Update Time',
                  type: 'scatter',
                  marker: {
                    size: 12
                  }
                }], layout);

                let cnt = 0;

                if (typeof pred_v[0] !== 'undefined') {
                  let interval = setInterval(function() {
                    if(pred_v[cnt]==-1){
                      if (cnt==0){
                        cnt = 1;
                      }
                      Plotly.extendTraces("<%= key %>", {
                        y: [[pred_v[cnt-1]], [true_v[cnt-1]], [0]]
                      }, [0, 1, 2])
                      document.getElementById("<%= key %>_update_time_text").innerHTML = "Model Update Time: " + time[cnt];
                    } else {
                      Plotly.extendTraces("<%= key %>", {
                        y: [[pred_v[cnt]], [true_v[cnt]], [-100]]
                      }, [0, 1, 2])
                    }
                    if(cnt > 300) {
                      Plotly.relayout("<%= key %>",{
                        xaxis:{
                          range: [time[cnt-300],time[cnt]]
                        }
                      });
                    }
                    if(++cnt === pred_v.length) clearInterval(interval);
                  }, 1);
                }
                (function(){
                  $(document).ready(function() {
                    $('#append_ami').click(function(){
                      $.ajax({
                        url: '/main/training/append_ami',
                        dataType: 'json',
                        type: 'GET',
                        data: {model_name: model_name, db: metadata[0], metadata: metadata},
                        success: function(result) {
                          if (result) {
                            document.getElementById("update_db").innerHTML = " | Load Data/New Data/All Data - " + result.origin_count + "/" + result.new_count + "/" + result.db_count;
                            if (typeof result.result["<%= key %>"].pred_v[0] !== 'undefined') {
                              pred_v = pred_v.concat(result.result["<%= key %>"].pred_v);
                              true_v = true_v.concat(result.result["<%= key %>"].true_v);
                              time = time.concat(result.result["<%= key %>"].time);
                              metadata = result.max_value;

                              let interval = setInterval(function() {
                                if(pred_v[cnt]==-1){
                                  if (cnt==0){
                                    cnt = 1;
                                  }
                                  Plotly.extendTraces("<%= key %>", {
                                    y: [[pred_v[cnt-1]], [true_v[cnt-1]], [0]]
                                  }, [0, 1, 2])
                                  document.getElementById("<%= key %>_update_time_text").innerHTML = "Model Update Time: " + time[cnt];
                                } else {
                                  Plotly.extendTraces("<%= key %>", {
                                    y: [[pred_v[cnt]], [true_v[cnt]], [-100]]
                                  }, [0, 1, 2])
                                }
                                if(cnt > 150) {
                                  Plotly.relayout("<%= key %>",{
                                    xaxis:{
                                      range: [time[cnt-150],time[cnt]]
                                    },
                                    yaxis: {
                                      range: [0, metadata[1]]
                                    }
                                  });
                                }
                                if(++cnt === pred_v.length) clearInterval(interval);
                              }, 1);
                            }
                          }
                        }
                      });
                    });
                  });
                })();
              }

              if(<%= key %>){
                let model_name = <%- JSON.stringify(model.model_name) %>;
                let loss_v = <%= JSON.stringify(result[key].loss) %>;
                let time = <%- JSON.stringify(result[key].time) %>;
                let metadata = <%- JSON.stringify(metadata) %>;
                document.getElementById("<%= key %>_update_time_text_loss").innerHTML = "Model Update Time: " + time[0];

                let layout = {
                  legend: {
                    x: 0.3,
                    y: 1.2,
                    "orientation": "h",
                    font: {size: 20}
                  },
                  xaxis: {
                    title: "Time",
                    titlefont: {
                      family: "Courier New, monospace",
                      size: 20
                    }
                  },
                  yaxis: {
                    title: "Loss",
                    titlefont: {
                      family: "Courier New, monospace",
                      size: 20
                    },
                    range: [0, metadata[2]]
                  }
                };

                Plotly.newPlot("<%= key %>_loss", [{
                  y: [],
                  name: 'Loss',
                  mode: 'lines',
                  line: {color: '#80CAF6'}
                }, {
                  y: [],
                  mode: 'markers',
                  name: 'Update Time',
                  type: 'scatter',
                  marker: {
                    size: 12
                  }
                }], layout);

                let cnt = 0;

                if (typeof loss_v[0] !== 'undefined') {
                  let interval = setInterval(function() {
                    if(loss_v[cnt]==-1){
                      if (cnt==0){
                        cnt = 1;
                      }
                      Plotly.extendTraces("<%= key %>_loss", {
                        y: [[loss_v[cnt-1]], [0]]
                      }, [0, 1])
                      document.getElementById("<%= key %>_update_time_text_loss").innerHTML = "Model Update Time: " + time[cnt];
                    } else {
                      Plotly.extendTraces("<%= key %>_loss", {
                        y: [[loss_v[cnt]], [-100]]
                      }, [0, 1])
                    }
                    if(cnt > 300) {
                      Plotly.relayout("<%= key %>_loss",{
                        xaxis: {
                          range: [time[cnt-300],time[cnt]]
                        }
                      });
                    }
                    if(++cnt === loss_v.length) clearInterval(interval);
                  }, 1);
                }
                (function(){
                  $(document).ready(function() {
                    $('#append_ami').click(function(){
                      $.ajax({
                        url: '/main/training/append_ami',
                        dataType: 'json',
                        type: 'GET',
                        data: {model_name: model_name, db: metadata[0], metadata: metadata},
                        success: function(result) {
                          if (result) {
                            if (typeof result.result["<%= key %>"].loss[0] !== 'undefined') {
                              loss_v = loss_v.concat(result.result["<%= key %>"].loss);
                              time = time.concat(result.result["<%= key %>"].time);
                              metadata = result.max_value;

                              let interval = setInterval(function() {
                                if(loss_v[cnt]==-1){
                                  if (cnt==0){
                                    cnt = 1;
                                  }
                                  Plotly.extendTraces("<%= key %>_loss", {
                                    y: [[loss_v[cnt-1]], [0]]
                                  }, [0, 1])
                                  document.getElementById("<%= key %>_update_time_text_loss").innerHTML = "Model Update Time: " + time[cnt];
                                } else {
                                  Plotly.extendTraces("<%= key %>_loss", {
                                    y: [[loss_v[cnt]], [-100]]
                                  }, [0, 1])
                                }
                                if(cnt > 300) {
                                  Plotly.relayout("<%= key %>_loss",{
                                    xaxis:{
                                      range: [time[cnt-300],time[cnt]]
                                    },
                                    yaxis: {
                                      range: [0, metadata[2]]
                                    }
                                  });
                                }
                                if(++cnt === loss_v.length) clearInterval(interval);
                              }, 1);
                            }
                          }
                        }
                      });
                    });
                  });
                })();
              }
              </script>
            <% } %>
          </div>
        </div>
      </div>
    </section>
  </body>
</html>
