syntax="proto3";
package streamDL;


// streamDLbroker
service streamDLbroker{
    // deploy model
    rpc set_deploy_model(stream Model) returns (Reply) {}

    // return deployed model list
    rpc get_deployed_model(null) returns (ModelList) {}

    // check duplicate check
    rpc is_deployed_model(ModelName) returns (Reply) {}

    // return ami lists available in the system
    rpc get_ami_list(null) returns (AMIList) {}

    //
    rpc restart_online_train(ModelName) returns (Reply) {}

    //
    rpc stop_online_train(ModelName) returns (Reply) {}

    //
    rpc stop_deployment(ModelName) returns (Reply) {}

    // TODO
    rpc download_model(ModelName) returns (stream Chunk) {}
}

message Chunk {
    bytes buffer = 1;
}

message ModelName{
    string name = 1;
}

message ModelList{
    repeated Model model = 1;
}

message Model{
    string name = 1;
    AMIList amis = 2;
    bytes buffer = 3;
    InputFmt input_fmt = 4;
    bool is_online_train = 5;
    string update_time = 6;
    string create_time = 7;
    string UUID = 8;
    onlineParam online_param = 9;
}

message ModelInfo{
    string name = 1;
    repeated string stream_inputs = 2;
    InputFmt input_fmt = 3;
}

message AMIList{
    repeated string ami_id = 1;
}

message onlineParam{

    string online_method = 1;
    int32 batch_size  = 2;
    string memory_method = 3;
    int32 episodic_mem_size = 4;
    bool is_schedule = 5;

}

message InputFmt{
    int32 look_back_win_size = 1;
    int32 input_shift_step = 2;
    int32 look_forward_step = 3;
    int32 look_forward_win_size = 4;
}

message Reply {
    bool status = 1;
    string message = 2;
}

message null{
}

